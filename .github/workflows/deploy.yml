# .github/workflows/deploy.yml

name: CI/CD Pipeline

# Trigger this workflow on every push to the 'main' branch and pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    
    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Cache Xcode derived data for faster builds
      - name: Cache Xcode derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-deriveddata-test-${{ hashFiles('**/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-deriveddata-test-
            ${{ runner.os }}-xcode-deriveddata-

      # 3. Select the version of Xcode to use
      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2.0'

      # 4. Run Unit Tests for Simple Cross Sums
      - name: Run Simple Cross Sums Unit Tests
        run: |
          echo "üß™ Running unit tests for Simple Cross Sums..."
          xcodebuild test \
            -project "CrossSumsSimple.xcodeproj" \
            -scheme "Simple Cross Sums" \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" \
            -testPlan "Simple Cross Sums" \
            -only-testing:"Simple Cross Sums Tests" \
            -enableCodeCoverage YES

      # 5. Run Unit Tests for CrossSumsMac
      - name: Run CrossSumsMac Unit Tests
        run: |
          echo "üß™ Running unit tests for CrossSumsMac..."
          xcodebuild test \
            -project "CrossSumsSimple.xcodeproj" \
            -scheme "CrossSumsMac" \
            -destination "platform=macOS" \
            -testPlan "CrossSumsMac" \
            -only-testing:"CrossSumsMacTests" \
            -enableCodeCoverage YES

      # 6. Run UI Tests for Simple Cross Sums
      - name: Run Simple Cross Sums UI Tests
        run: |
          echo "üß™ Running UI tests for Simple Cross Sums..."
          xcodebuild test \
            -project "CrossSumsSimple.xcodeproj" \
            -scheme "Simple Cross Sums" \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" \
            -testPlan "Simple Cross Sums" \
            -only-testing:"Simple Cross Sums UI Tests" \
            -enableCodeCoverage YES

      # 7. Run UI Tests for CrossSumsMac
      - name: Run CrossSumsMac UI Tests
        run: |
          echo "üß™ Running UI tests for CrossSumsMac..."
          xcodebuild test \
            -project "CrossSumsSimple.xcodeproj" \
            -scheme "CrossSumsMac" \
            -destination "platform=macOS" \
            -testPlan "CrossSumsMac" \
            -only-testing:"CrossSumsMacUITests" \
            -enableCodeCoverage YES

  build-and-deploy:
    name: Build and Deploy to TestFlight
    runs-on: macos-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Cache Xcode derived data for faster builds
      - name: Cache Xcode derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-deriveddata-${{ hashFiles('**/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-deriveddata-

      # 3. Select the version of Xcode to use
      # Required by Bazel's iOS build rules.
      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2.0'

      # 4. Clean build artifacts to ensure fresh build
      - name: Clean Xcode build artifacts
        run: |
          echo "üßπ Cleaning previous build artifacts..."
          rm -rf CrossSumsSimple.xcarchive
          rm -f *.ipa
          echo "‚úÖ Clean completed"

      # 4.1. Install iOS Distribution Certificate for Code Signing
      - name: Install iOS Distribution Certificate
        env:
          IOS_DIST_SIGNING_KEY: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          IOS_DIST_SIGNING_KEY_PASSWORD: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
        run: |
          echo "üîê Installing certificate into system keychain..."
          
          # Create variable for certificate path
          CERTIFICATE_PATH=$RUNNER_TEMP/ios_distribution.p12
          
          # Decode base64 certificate and save to file
          echo "üìÑ Decoding certificate from secrets..."
          echo -n "$IOS_DIST_SIGNING_KEY" | base64 --decode -o $CERTIFICATE_PATH
          
          # Import certificate directly into system keychain
          echo "üì• Installing certificate into system keychain..."
          sudo security import $CERTIFICATE_PATH -k /Library/Keychains/System.keychain -P "$IOS_DIST_SIGNING_KEY_PASSWORD" -T /usr/bin/codesign
          
          # Verify certificate installation
          echo "‚úÖ Verifying certificate installation..."
          security find-identity -v -p codesigning
          
          # Clean up certificate files
          rm -f $CERTIFICATE_PATH
          
          echo "üéâ Certificate installation completed!"

      # 5. Build and Archive with xcodebuild (replacing Bazel)
      # xcodebuild properly processes asset catalogs and generates required icon files
      - name: Build and Archive with xcodebuild
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          echo "üèóÔ∏è Building and archiving with xcodebuild..."
          
          # Create App Store Connect API key file for authentication
          echo "üîê Setting up Apple Developer authentication..."
          API_KEY_PATH=$RUNNER_TEMP/AuthKey.p8
          echo -n "$APP_STORE_CONNECT_API_KEY_CONTENT" > $API_KEY_PATH
          
          # Set proper permissions on the API key file
          chmod 600 $API_KEY_PATH
          
          # Validate API key file creation
          echo "üîç Validating API key file..."
          if [ -f "$API_KEY_PATH" ]; then
            echo "‚úÖ API key file exists at: $API_KEY_PATH"
            echo "üìä File size: $(wc -c < $API_KEY_PATH) bytes"
            echo "üîê File permissions: $(ls -la $API_KEY_PATH)"
            
            # Check if file starts with expected P8 format
            if head -1 "$API_KEY_PATH" | grep -q "BEGIN PRIVATE KEY"; then
              echo "‚úÖ API key file has correct P8 format header"
            else
              echo "‚ùå API key file missing P8 format header"
              echo "üêõ First line: $(head -1 $API_KEY_PATH)"
            fi
          else
            echo "‚ùå API key file was not created!"
            exit 1
          fi
          
          echo "üéØ API key validation completed"
          
          # Archive the project using manual signing with distribution certificate
          xcodebuild -project "CrossSumsSimple.xcodeproj" \
            -scheme "Simple Cross Sums" \
            -configuration "Release" \
            -destination "generic/platform=iOS" \
            -archivePath "CrossSumsSimple.xcarchive" \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$API_KEY_PATH" \
            -authenticationKeyID "$APP_STORE_CONNECT_API_KEY_ID" \
            -authenticationKeyIssuerID "$APP_STORE_CONNECT_ISSUER_ID" \
            DEVELOPMENT_TEAM="J4QUKKF6V3" \
            PRODUCT_BUNDLE_IDENTIFIER="com.crosssumssimple.app" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_ENTITLEMENTS="Simple Cross Sums.entitlements" \
            PROVISIONING_PROFILE_SPECIFIER="CrossSumsSimple_AppStore" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            archive
          
          echo "‚úÖ Archive completed successfully"
          
          # Export IPA for TestFlight
          echo "üì¶ Exporting IPA for TestFlight..."
          xcodebuild -exportArchive \
            -archivePath "CrossSumsSimple.xcarchive" \
            -exportPath "." \
            -exportOptionsPlist "exportOptions.plist" \
            -authenticationKeyPath "$API_KEY_PATH" \
            -authenticationKeyID "$APP_STORE_CONNECT_API_KEY_ID" \
            -authenticationKeyIssuerID "$APP_STORE_CONNECT_ISSUER_ID"
          
          echo "‚úÖ IPA export completed"

      # 5.1. Debug - List xcodebuild output to verify IPA location  
      - name: Debug - List xcodebuild output
        run: |
          echo "Current directory: $(pwd)"
          echo "Archive contents:"
          ls -la CrossSumsSimple.xcarchive/ 2>/dev/null || echo "Archive not found"
          echo "Export directory contents:"
          ls -la . | grep -E "\.(ipa|app)$" || echo "No IPA files found in current directory"
          echo "Looking for IPA files recursively:"
          find . -name "*.ipa" -type f 2>/dev/null || echo "No .ipa files found"

      # 6. Setup Ruby and Fastlane
      # This installs Ruby and your project's gems (like fastlane) from the Gemfile.
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler: '2.4'
          working-directory: ./fastlane # Specifies where to find the Gemfile

      # 7. Install Fastlane gems (explicit step to ensure they're available)
      - name: Install Fastlane gems
        working-directory: ./fastlane
        run: bundle install

      # 7.1. Find and set IPA path from xcodebuild export
      - name: Find IPA file and set path
        id: find_ipa
        run: |
          echo "=== IPA File Discovery for xcodebuild Export ==="
          echo "Current directory: $(pwd)"
          
          # xcodebuild exports to current directory with app name
          # Look for the exported IPA file
          IPA_FILE=$(find . -maxdepth 2 -name "*.ipa" -type f | head -1)
          
          if [ -n "$IPA_FILE" ]; then
            echo "‚úÖ Found IPA file: $IPA_FILE"
            echo "IPA_PATH=$IPA_FILE" >> $GITHUB_OUTPUT
            
            # Show IPA file details
            echo "üìä IPA file details:"
            ls -lh "$IPA_FILE"
            exit 0
          fi
          
          # Fallback - search more broadly
          echo "No IPA found in current directory, searching recursively..."
          IPA_FILE=$(find . -name "*.ipa" -type f 2>/dev/null | head -1)
          
          if [ -n "$IPA_FILE" ]; then
            echo "‚úÖ Found IPA using recursive search: $IPA_FILE"
            echo "IPA_PATH=$IPA_FILE" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Debug information if not found
          echo "‚ùå No IPA file found!"
          echo "=== Debug Information ==="
          echo "Current directory contents:"
          ls -la
          echo "Looking for any files with 'ipa' in name:"
          find . -type f -name "*ipa*" 2>/dev/null || echo "No files with 'ipa' in name found"
          exit 1

      # 7.2. Run Fastlane to Deploy
      # This step runs inside the `./fastlane` directory.
      - name: Upload to TestFlight
        working-directory: ./fastlane
        env:
          # Secrets for authenticating with App Store Connect
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          
          # Pass the dynamically found IPA path as absolute path to avoid relative path issues
          FASTLANE_IPA_PATH: ${{ github.workspace }}/${{ steps.find_ipa.outputs.IPA_PATH }}
        run: bundle exec fastlane beta
