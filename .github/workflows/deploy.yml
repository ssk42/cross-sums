# .github/workflows/deploy.yml

name: Build with Bazel, Deploy with Fastlane

# Trigger this workflow on every push to the 'main' branch
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy to TestFlight
    runs-on: macos-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Cache Bazel build artifacts
      # This is a critical performance improvement. It saves the Bazel cache 
      # between runs, so you don't have to redownload dependencies every time.
      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: ~/.cache/bazel
          key: ${{ runner.os }}-bazel-${{ hashFiles('**/MODULE.bazel', '**/WORKSPACE', '.bazelversion') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      # 3. Select the version of Xcode to use
      # Required by Bazel's iOS build rules.
      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2.0'

      # 4. Clean Bazel cache to avoid stale dependencies
      - name: Clean Bazel cache
        run: bazel clean --expunge

      # 5. Build IPA with Bazel (for device deployment to TestFlight)
      # The 'Install Bazel' step has been removed. The GitHub runner has 'bazelisk'
      # pre-installed, which will read the .bazelversion file and automatically
      # use the correct version of Bazel for the build.
      - name: Build IPA with Bazel
        run: |
          bazel build //CrossSumsSimple:CrossSumsSimple_device_ipa --config=ios_device --xcode_version=16.2.0 --verbose_failures

      # 5.5. Debug - List bazel-bin contents to verify IPA location
      - name: Debug - List bazel-bin contents
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of bazel-bin:"
          find bazel-bin -name "*.ipa" -type f 2>/dev/null || echo "No .ipa files found in bazel-bin"
          echo "Contents of bazel-bin/CrossSumsSimple (if exists):"
          ls -la bazel-bin/CrossSumsSimple/ 2>/dev/null || echo "bazel-bin/CrossSumsSimple directory not found"

      # 6. Setup Ruby and Fastlane
      # This installs Ruby and your project's gems (like fastlane) from the Gemfile.
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler: '2.4'
          working-directory: ./fastlane # Specifies where to find the Gemfile

      # 7. Install Fastlane gems (explicit step to ensure they're available)
      - name: Install Fastlane gems
        working-directory: ./fastlane
        run: bundle install

      # 7.1. Install iOS Distribution Certificate for Code Signing
      - name: Install iOS Distribution Certificate
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}

      # 7.5. Find and set IPA path dynamically with robust fallback
      - name: Find IPA file and set path
        id: find_ipa
        run: |
          echo "=== IPA File Discovery Debug ==="
          echo "Current directory: $(pwd)"
          echo "Checking if bazel-bin is a symlink:"
          ls -la bazel-bin 2>/dev/null || echo "bazel-bin not found"
          
          # Method 1: Try the known direct path first
          DIRECT_PATH="bazel-bin/CrossSumsSimple/CrossSumsSimple_device_ipa.ipa"
          if [ -f "$DIRECT_PATH" ]; then
            echo "✅ Found IPA using direct path: $DIRECT_PATH"
            echo "IPA_PATH=$DIRECT_PATH" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Method 2: Use find with symlink following
          echo "Direct path failed, trying find with -L flag..."
          IPA_FILE=$(find bazel-bin -L -name "*.ipa" -type f 2>/dev/null | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "✅ Found IPA using find -L: $IPA_FILE"
            echo "IPA_PATH=$IPA_FILE" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Method 3: Manual directory traversal
          echo "Find command failed, trying manual discovery..."
          if [ -d "bazel-bin/CrossSumsSimple" ]; then
            echo "Contents of bazel-bin/CrossSumsSimple:"
            ls -la bazel-bin/CrossSumsSimple/
            
            # Look for device IPA files in the directory
            for file in bazel-bin/CrossSumsSimple/*device_ipa*.ipa; do
              if [ -f "$file" ]; then
                echo "✅ Found IPA using manual discovery: $file"
                echo "IPA_PATH=$file" >> $GITHUB_OUTPUT
                exit 0
              fi
            done
          fi
          
          # Method 4: Last resort - search entire bazel output
          echo "Manual discovery failed, searching entire bazel output..."
          for file in bazel-bin/**/*.ipa bazel-out/**/*.ipa; do
            if [ -f "$file" ]; then
              echo "✅ Found IPA in bazel output: $file"
              echo "IPA_PATH=$file" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          
          # All methods failed - provide detailed error information
          echo "❌ All IPA discovery methods failed!"
          echo "=== Debug Information ==="
          echo "bazel-bin structure:"
          find bazel-bin -type f -name "*ipa*" 2>/dev/null || echo "No files with 'ipa' in name found"
          echo "Available files:"
          find bazel-bin -type f | head -20
          exit 1

      # 8. Run Fastlane to Deploy
      # This step runs inside the `./fastlane` directory.
      - name: Upload to TestFlight
        working-directory: ./fastlane
        env:
          # Secrets for authenticating with App Store Connect
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          
          # Pass the dynamically found IPA path as absolute path to avoid relative path issues
          FASTLANE_IPA_PATH: ${{ github.workspace }}/${{ steps.find_ipa.outputs.IPA_PATH }}
        run: bundle exec fastlane beta
