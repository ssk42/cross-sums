# fastlane/Fastfile

default_platform(:ios)

platform :ios do
  desc "Upload a build from Bazel to TestFlight"
  lane :beta do
    # 1. Determine the IPA path with multiple fallback options
    ipa_path = ENV['FASTLANE_IPA_PATH']
    
    # If not provided via environment, search for IPA files
    if ipa_path.nil? || ipa_path.empty?
      UI.message("FASTLANE_IPA_PATH not set, searching for IPA files...")
      
      # Search in common Bazel output locations (relative to fastlane directory)
      search_paths = [
        '../bazel-bin/CrossSumsSimple/CrossSumsSimple_ipa.ipa',
        '../bazel-bin/**/CrossSumsSimple_ipa.ipa',
        '../bazel-bin/**/*.ipa'
      ]
      
      search_paths.each do |pattern|
        found_files = Dir.glob(File.expand_path(pattern, __dir__))
        unless found_files.empty?
          ipa_path = found_files.first
          UI.message("Found IPA file using pattern '#{pattern}': #{ipa_path}")
          break
        end
      end
    else
      # If path is provided, expand it to absolute path if it's not already
      unless ipa_path.start_with?('/')
        ipa_path = File.expand_path(ipa_path, __dir__)
      end
      UI.message("Using provided IPA path (expanded): #{ipa_path}")
    end
    
    # 2. Validate that the IPA file exists
    if ipa_path.nil? || ipa_path.empty? || !File.exist?(ipa_path)
      # List available files for debugging
      UI.message("Available files in bazel-bin:")
      bazel_bin_path = File.expand_path('../bazel-bin', __dir__)
      if Dir.exist?(bazel_bin_path)
        Dir.glob("#{bazel_bin_path}/**/*.ipa").each do |file|
          UI.message("  - #{file}")
        end
      end
      
      UI.user_error!("IPA file not found. Searched path: #{ipa_path}")
    end
    
    UI.message("Using IPA file at: #{ipa_path}")
    
    # 3. Configure App Store Connect API Key Authentication
    UI.message("Configuring App Store Connect API Key authentication...")
    
    # Verify that all required API Key environment variables are present
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    issuer_id = ENV['APP_STORE_CONNECT_ISSUER_ID'] 
    key_content = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
    
    if api_key_id.nil? || api_key_id.empty?
      UI.user_error!("APP_STORE_CONNECT_API_KEY_ID environment variable is missing")
    end
    
    if issuer_id.nil? || issuer_id.empty?
      UI.user_error!("APP_STORE_CONNECT_ISSUER_ID environment variable is missing")
    end
    
    if key_content.nil? || key_content.empty?
      UI.user_error!("APP_STORE_CONNECT_API_KEY_CONTENT environment variable is missing")
    end
    
    UI.message("✅ All API Key credentials are present")
    
    # Handle API key content format (decode base64 if needed)
    UI.message("Processing API key content...")
    
    # Check if key content is base64 encoded (common in CI environments)
    key_content_processed = if key_content.include?("\n") || key_content.start_with?("-----BEGIN")
      UI.message("API key content appears to be in raw format")
      key_content
    else
      UI.message("API key content appears to be base64 encoded, decoding...")
      require 'base64'
      begin
        Base64.decode64(key_content)
      rescue => e
        UI.error("Failed to decode base64 key content: #{e.message}")
        key_content  # Fallback to original content
      end
    end
    
    # Create temporary file for API key (Fastlane prefers file-based keys)
    UI.message("Creating temporary API key file...")
    require 'tempfile'
    
    temp_key_file = Tempfile.new(['api_key', '.p8'])
    temp_key_file.write(key_content_processed)
    temp_key_file.close
    
    UI.message("✅ API key file created at: #{temp_key_file.path}")
    
    begin
      # 4. Upload to TestFlight using file-based API Key authentication
      UI.message("Uploading to TestFlight...")
      upload_to_testflight(
        ipa: ipa_path,
        api_key_path: temp_key_file.path,
        api_key_id: api_key_id,
        api_key_issuer_id: issuer_id,
        skip_waiting_for_build_processing: true,
        changelog: "New build uploaded automatically from GitHub Actions.",
        app_platform: "ios"
      )
    ensure
      # Clean up temporary file
      temp_key_file.unlink if temp_key_file
      UI.message("🗑️ Cleaned up temporary API key file")
    end

    # You can add other steps here after the upload is complete.
    # For example, send a notification to a Slack channel.
    # slack(
    #   message: "Successfully uploaded new build of Cross Sums to TestFlight! 🎉"
    # )

    puts "Build successfully uploaded to TestFlight!"
  end
end
