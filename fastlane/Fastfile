# fastlane/Fastfile

default_platform(:ios)

platform :ios do
  desc "Upload a build from Bazel to TestFlight"
  lane :beta do
    # 1. Determine the IPA path with multiple fallback options
    ipa_path = ENV['FASTLANE_IPA_PATH']
    
    # If not provided via environment, search for IPA files
    if ipa_path.nil? || ipa_path.empty?
      UI.message("FASTLANE_IPA_PATH not set, searching for IPA files...")
      
      # Search in common Bazel output locations (relative to fastlane directory)
      search_paths = [
        '../bazel-bin/CrossSumsSimple/CrossSumsSimple_ipa.ipa',
        '../bazel-bin/**/CrossSumsSimple_ipa.ipa',
        '../bazel-bin/**/*.ipa'
      ]
      
      search_paths.each do |pattern|
        found_files = Dir.glob(File.expand_path(pattern, __dir__))
        unless found_files.empty?
          ipa_path = found_files.first
          UI.message("Found IPA file using pattern '#{pattern}': #{ipa_path}")
          break
        end
      end
    else
      # If path is provided, expand it to absolute path if it's not already
      unless ipa_path.start_with?('/')
        ipa_path = File.expand_path(ipa_path, __dir__)
      end
      UI.message("Using provided IPA path (expanded): #{ipa_path}")
    end
    
    # 2. Validate that the IPA file exists
    if ipa_path.nil? || ipa_path.empty? || !File.exist?(ipa_path)
      # List available files for debugging
      UI.message("Available files in bazel-bin:")
      bazel_bin_path = File.expand_path('../bazel-bin', __dir__)
      if Dir.exist?(bazel_bin_path)
        Dir.glob("#{bazel_bin_path}/**/*.ipa").each do |file|
          UI.message("  - #{file}")
        end
      end
      
      UI.user_error!("IPA file not found. Searched path: #{ipa_path}")
    end
    
    UI.message("Using IPA file at: #{ipa_path}")
    
    # 3. Configure App Store Connect API Key Authentication
    UI.message("Configuring App Store Connect API Key authentication...")
    
    # Verify that all required API Key environment variables are present
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    issuer_id = ENV['APP_STORE_CONNECT_ISSUER_ID'] 
    key_content = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
    
    if api_key_id.nil? || api_key_id.empty?
      UI.user_error!("APP_STORE_CONNECT_API_KEY_ID environment variable is missing")
    end
    
    if issuer_id.nil? || issuer_id.empty?
      UI.user_error!("APP_STORE_CONNECT_ISSUER_ID environment variable is missing")
    end
    
    if key_content.nil? || key_content.empty?
      UI.user_error!("APP_STORE_CONNECT_API_KEY_CONTENT environment variable is missing")
    end
    
    UI.message("âœ… All API Key credentials are present")
    
    # 4. Upload to TestFlight with explicit API Key authentication
    UI.message("Uploading to TestFlight...")
    upload_to_testflight(
      ipa: ipa_path,
      api_key: {
        key_id: api_key_id,
        issuer_id: issuer_id,
        key_content: key_content
      },
      skip_waiting_for_build_processing: true,
      changelog: "New build uploaded automatically from GitHub Actions.",
      app_platform: "ios"
    )

    # You can add other steps here after the upload is complete.
    # For example, send a notification to a Slack channel.
    # slack(
    #   message: "Successfully uploaded new build of Cross Sums to TestFlight! ðŸŽ‰"
    # )

    puts "Build successfully uploaded to TestFlight!"
  end
end
