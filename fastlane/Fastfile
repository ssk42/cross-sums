# fastlane/Fastfile

default_platform(:ios)

platform :ios do
  desc "Upload a build from Bazel to TestFlight"
  lane :beta do
    # 1. Determine the IPA path with multiple fallback options
    ipa_path = ENV['FASTLANE_IPA_PATH']
    
    # If not provided via environment, search for IPA files
    if ipa_path.nil? || ipa_path.empty?
      UI.message("FASTLANE_IPA_PATH not set, searching for IPA files...")
      
      # Search in common Bazel output locations (relative to fastlane directory)
      search_paths = [
        '../bazel-bin/CrossSumsSimple/CrossSumsSimple_ipa.ipa',
        '../bazel-bin/**/CrossSumsSimple_ipa.ipa',
        '../bazel-bin/**/*.ipa'
      ]
      
      search_paths.each do |pattern|
        found_files = Dir.glob(File.expand_path(pattern, __dir__))
        unless found_files.empty?
          ipa_path = found_files.first
          UI.message("Found IPA file using pattern '#{pattern}': #{ipa_path}")
          break
        end
      end
    else
      # If path is provided, expand it to absolute path if it's not already
      unless ipa_path.start_with?('/')
        ipa_path = File.expand_path(ipa_path, __dir__)
      end
      UI.message("Using provided IPA path (expanded): #{ipa_path}")
    end
    
    # 2. Validate that the IPA file exists
    if ipa_path.nil? || ipa_path.empty? || !File.exist?(ipa_path)
      # List available files for debugging
      UI.message("Available files in bazel-bin:")
      bazel_bin_path = File.expand_path('../bazel-bin', __dir__)
      if Dir.exist?(bazel_bin_path)
        Dir.glob("#{bazel_bin_path}/**/*.ipa").each do |file|
          UI.message("  - #{file}")
        end
      end
      
      UI.user_error!("IPA file not found. Searched path: #{ipa_path}")
    end
    
    UI.message("Using IPA file at: #{ipa_path}")
    
    # 3. Configure App Store Connect API Key Authentication
    UI.message("Configuring App Store Connect API Key authentication...")
    
    # Verify that all required API Key environment variables are present
    api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    issuer_id = ENV['APP_STORE_CONNECT_ISSUER_ID'] 
    key_content = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
    
    if api_key_id.nil? || api_key_id.empty?
      UI.user_error!("APP_STORE_CONNECT_API_KEY_ID environment variable is missing")
    end
    
    if issuer_id.nil? || issuer_id.empty?
      UI.user_error!("APP_STORE_CONNECT_ISSUER_ID environment variable is missing")
    end
    
    if key_content.nil? || key_content.empty?
      UI.user_error!("APP_STORE_CONNECT_API_KEY_CONTENT environment variable is missing")
    end
    
    UI.message("‚úÖ All API Key credentials are present")
    
    # Process API key content format
    UI.message("Processing API key content...")
    
    # Add detailed validation and debugging for key content
    UI.message("Debug: Key content length: #{key_content.length} characters")
    UI.message("Debug: Key content preview (first 50 chars): #{key_content[0..49]}...")
    UI.message("Debug: Key content preview (last 50 chars): ...#{key_content[-50..-1]}")
    
    if key_content.empty?
      UI.user_error!("‚ùå API key content is empty. Check your APP_STORE_CONNECT_API_KEY_CONTENT secret.")
    end
    
    # Detect if key content is base64 encoded or raw PEM format
    is_base64_encoded = !key_content.include?("\n") && !key_content.start_with?("-----BEGIN")
    
    if is_base64_encoded
      UI.message("üîÑ API key content appears to be base64 encoded")
      # Fastlane will handle base64 decoding automatically with is_key_content_base64: true
    else
      UI.message("‚úÖ API key content appears to be in raw PEM format")
      # Validate PEM format
      unless key_content.include?('-----BEGIN PRIVATE KEY-----') || 
             key_content.include?('-----BEGIN EC PRIVATE KEY-----') ||
             key_content.include?('-----BEGIN RSA PRIVATE KEY-----')
        UI.user_error!("‚ùå API key content doesn't appear to be a valid .p8 key file format. Expected PEM format with -----BEGIN PRIVATE KEY----- header.")
      end
    end
    
    # 4. Configure App Store Connect API Key using Fastlane's built-in action
    UI.message("Setting up App Store Connect API Key...")
    app_store_connect_api_key(
      key_id: api_key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: is_base64_encoded
    )
    
    UI.message("‚úÖ App Store Connect API Key configured successfully")
    
    # 5. Upload to TestFlight
    UI.message("Uploading to TestFlight...")
    upload_to_testflight(
      ipa: ipa_path,
      skip_waiting_for_build_processing: true,
      changelog: "New build uploaded automatically from GitHub Actions.",
      app_platform: "ios"
    )

    puts "Build successfully uploaded to TestFlight!"
    puts "Note: Testers can be added manually through App Store Connect"
  end

  desc "Add internal testers to TestFlight"
  lane :add_internal_testers do
    # Add internal testers by email
    # Replace these with your actual team member emails
    internal_testers = [
      "sthreitz@gmail.com"
    ]
    
    internal_testers.each do |email|
      UI.message("Adding internal tester: #{email}")
      pilot(
        distribute_external: true,
        notify_external_testers: true,
        email: email
      )
    end
    
    puts "Internal testers added successfully!"
  end

  desc "Add external testers (fan group) to TestFlight"
  lane :add_external_testers do
    # Add external testers by email
    # Replace these with your actual fan group emails
    external_testers = [
      # Add fan group emails here
      "seserwom@gmail.com",
      "spludking@gmail.com",
      "kelly.maranch@gmail.com"
    ]
    
    if external_testers.empty?
      UI.message("No external testers configured. Add emails to the external_testers array.")
      return
    end
    
    external_testers.each do |email|
      UI.message("Adding external tester: #{email}")
      pilot(
        distribute_external: true,
        notify_external_testers: true,
        email: email
      )
    end
    
    puts "External testers added successfully!"
  end

  desc "Submit for external testing (requires Apple review)"
  lane :submit_external_testing do
    UI.message("Submitting build for external testing...")
    pilot(
      distribute_external: true,
      notify_external_testers: true,
      changelog: "New build available for external testing!",
      app_platform: "ios"
    )
    puts "Build submitted for external testing review!"
  end
end
